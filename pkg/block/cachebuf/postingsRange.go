// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cachebuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type postingsRange struct {
	_tab flatbuffers.Table
}

func GetRootAspostingsRange(buf []byte, offset flatbuffers.UOffsetT) *postingsRange {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &postingsRange{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *postingsRange) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *postingsRange) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *postingsRange) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *postingsRange) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *postingsRange) Start() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *postingsRange) MutateStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *postingsRange) End() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *postingsRange) MutateEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func postingsRangeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func postingsRangeAddName(builder *flatbuffers.Builder, Name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Name), 0)
}
func postingsRangeAddValue(builder *flatbuffers.Builder, Value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Value), 0)
}
func postingsRangeAddStart(builder *flatbuffers.Builder, Start int64) {
	builder.PrependInt64Slot(2, Start, 0)
}
func postingsRangeAddEnd(builder *flatbuffers.Builder, End int64) {
	builder.PrependInt64Slot(3, End, 0)
}
func postingsRangeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
