// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package indexcachefb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type indexCache struct {
	_tab flatbuffers.Table
}

func GetRootAsindexCache(buf []byte, offset flatbuffers.UOffsetT) *indexCache {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &indexCache{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *indexCache) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *indexCache) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *indexCache) Version() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *indexCache) MutateVersion(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *indexCache) Symbols(obj *symbol, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *indexCache) SymbolsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *indexCache) LabelValues(obj *label, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *indexCache) LabelValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *indexCache) Postings(obj *postingsRange, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *indexCache) PostingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func indexCacheStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func indexCacheAddVersion(builder *flatbuffers.Builder, Version int8) {
	builder.PrependInt8Slot(0, Version, 0)
}
func indexCacheAddSymbols(builder *flatbuffers.Builder, Symbols flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Symbols), 0)
}
func indexCacheStartSymbolsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func indexCacheAddLabelValues(builder *flatbuffers.Builder, LabelValues flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(LabelValues), 0)
}
func indexCacheStartLabelValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func indexCacheAddPostings(builder *flatbuffers.Builder, Postings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Postings), 0)
}
func indexCacheStartPostingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func indexCacheEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
